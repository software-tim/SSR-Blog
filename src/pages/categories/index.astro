---
// src/pages/categories/index.astro
import MainLayout from '../../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';

// Debug logging with error handling
try {
 // console.log("Rendering categories index page");  
} catch (error) {
  // Silent catch in case console is not available
}

// Ultra-defensive function to get category from an article with strict typing
function getArticleCategory(article: unknown): string {
  try {
    // Validate article exists and is an object
    if (!article || typeof article !== 'object') return 'General';
    
    // Safe type casting after validation
    const articleObj = article as any;
    
    // First try to get explicit category with thorough validation
    if (articleObj.data && 
        typeof articleObj.data === 'object' && 
        'category' in articleObj.data && 
        articleObj.data.category !== null &&
        typeof articleObj.data.category === 'string' && 
        articleObj.data.category.trim() !== '') {
      return articleObj.data.category;
    }
    
    // If no category, try to use first tag with thorough validation
    if (articleObj.data && 
        typeof articleObj.data === 'object' && 
        'tags' in articleObj.data &&
        articleObj.data.tags !== null &&
        Array.isArray(articleObj.data.tags) && 
        articleObj.data.tags.length > 0) {
      
      // Extract first valid tag
      for (let i = 0; i < articleObj.data.tags.length; i++) {
        const tag = articleObj.data.tags[i];
        if (tag !== null && 
            tag !== undefined && 
            typeof tag === 'string' && 
            tag.trim() !== '') {
          return tag;
        }
      }
    }
    
    // If we reach here, check title for keywords
    if (articleObj.data && 
        typeof articleObj.data === 'object' && 
        'title' in articleObj.data &&
        articleObj.data.title !== null &&
        typeof articleObj.data.title === 'string' && 
        articleObj.data.title.trim() !== '') {
      
      // Convert to lowercase for case-insensitive matching
      const title = articleObj.data.title.toLowerCase();
      
      // Check for keywords in title
      const keywords: [string, string][] = [
        ['javascript', 'JavaScript'],
        ['css', 'CSS'],
        ['html', 'HTML'],
        ['astro', 'Astro'],
        ['react', 'React'],
        ['vue', 'Vue'],
        ['svelte', 'Svelte'],
        ['tutorial', 'Tutorials'],
        ['guide', 'Guides'],
        ['review', 'Reviews'],
        // Add more keyword mappings as needed
      ];
      
      for (let i = 0; i < keywords.length; i++) {
        const [keyword, category] = keywords[i];
        if (title.includes(keyword)) {
          return category;
        }
      }
    }
    
    // Default category as last resort
    return 'General';
  } catch (error) {
    try {
      //console.error('Error getting article category:', error);
    } catch (e) {
      // Silent catch in case console is not available
    }
    return 'General';
  }
}

// Interface for category data
interface CategoryInfo {
  count: number;
  articles: any[];
}

// Get all articles with defensive error handling
let allArticles: any[] = [];
try {
  allArticles = await getCollection('blog');
  try {
   // console.log(`Found ${allArticles.length} total articles`);
  } catch (e) {
    // Silent catch
  }
} catch (error) {
  try {
    console.error('Error getting blog collection:', error);
  } catch (e) {
    // Silent catch
  }
  // Keep allArticles as empty array
}

// Extract and count categories with maximally defensive approach
const categoryData: Record<string, CategoryInfo> = {};

// Process each article
try {
  for (let i = 0; i < allArticles.length; i++) {
    try {
      const article = allArticles[i];
      let category: string;
      
      try {
        category = getArticleCategory(article);
      } catch (error) {
        try {
          console.error(`Error getting category for article at index ${i}:`, error);
        } catch (e) {
          // Silent catch
        }
        category = 'General';
      }
      
      // Initialize category if needed with safe type checking
      if (typeof categoryData[category] === 'undefined') {
        categoryData[category] = {
          count: 0,
          articles: []
        };
      }
      
      // Increment count and add article
      try {
        categoryData[category].count += 1;
      } catch (error) {
        try {
          console.error(`Error incrementing count for category ${category}:`, error);
        } catch (e) {
          // Silent catch
        }
        // Attempt to repair
        categoryData[category].count = (categoryData[category].count || 0) + 1;
      }
      
      try {
        categoryData[category].articles.push(article);
      } catch (error) {
        try {
          console.error(`Error adding article to category ${category}:`, error);
        } catch (e) {
          // Silent catch
        }
        // Attempt to repair
        if (!Array.isArray(categoryData[category].articles)) {
          categoryData[category].articles = [];
        }
        categoryData[category].articles.push(article);
      }
      
    } catch (error) {
      try {
        console.error(`Error processing article at index ${i}:`, error);
      } catch (e) {
        // Silent catch
      }
    }
  }
} catch (error) {
  try {
    console.error('Error processing articles for categories:', error);
  } catch (e) {
    // Silent catch
  }
}

// Convert to array and sort alphabetically with defensive approach
interface CategoryDisplay {
  name: string;
  count: number;
}

let categories: CategoryDisplay[] = [];
try {
  const categoryNames = Object.keys(categoryData);
  
  categories = categoryNames.map((name: string): CategoryDisplay => {
    try {
      // Safe access with fallbacks
      const data = categoryData[name] || { count: 0, articles: [] };
      const count = typeof data.count === 'number' ? data.count : 0;
      
      return {
        name: name,
        count: count
      };
    } catch (error) {
      try {
        console.error(`Error mapping category ${name}:`, error);
      } catch (e) {
        // Silent catch
      }
      // Return fallback on error
      return {
        name: name,
        count: 0
      };
    }
  });
  
  // Safe sorting with error handling
  try {
    categories.sort((a: CategoryDisplay, b: CategoryDisplay): number => {
      try {
        const nameA = typeof a.name === 'string' ? a.name : '';
        const nameB = typeof b.name === 'string' ? b.name : '';
        return nameA.localeCompare(nameB);
      } catch (error) {
        try {
          console.error('Error comparing category names:', error);
        } catch (e) {
          // Silent catch
        }
        return 0; // Preserve original order on error
      }
    });
  } catch (error) {
    try {
      console.error('Error sorting categories:', error);
    } catch (e) {
      // Silent catch
    }
    // Keep unsorted
  }
  
  try {
    //console.log(`Found ${categories.length} categories:`, categories.map(c => c.name).join(', '));
  } catch (e) {
    // Silent catch
  }
} catch (error) {
  try {
    console.error('Error creating categories array:', error);
  } catch (e) {
    // Silent catch
  }
}

// Breadcrumb items
const breadcrumbItems = [
  { label: 'Categories', href: '/categories' }
];
---

<MainLayout 
  title="Article Categories" 
  description="Browse all article categories"
  breadcrumbItems={breadcrumbItems}
>
  <h1 class="text-4xl font-bold mb-8">Categories</h1>
  
  {categories.length > 0 ? (
    <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {categories.map((category: CategoryDisplay) => {
        try {
          // Validate category properties with fallbacks
          const name = typeof category.name === 'string' ? category.name : 'Unknown';
          const count = typeof category.count === 'number' ? category.count : 0;
          
          // Safe URL encoding with error handling
          let encodedName = 'unknown';
          try {
            encodedName = encodeURIComponent(name);
          } catch (error) {
            try {
              console.error(`Error encoding category name ${name}:`, error);
            } catch (e) {
              // Silent catch
            }
          }
          
          return (
            <a 
              href={`/categories/${encodedName}`}
              class="bg-white p-6 rounded-lg shadow-sm hover:shadow-md transition-shadow"
            >
              <h2 class="text-xl font-semibold text-indigo-600">{name}</h2>
              <p class="text-gray-600 mt-2">
                {count} article{count !== 1 ? 's' : ''}
              </p>
            </a>
          );
        } catch (error) {
          try {
            console.error('Error rendering category:', error);
          } catch (e) {
            // Silent catch
          }
          return null;
        }
      })}
    </div>
  ) : (
    <div class="bg-gray-50 p-8 rounded-lg text-center">
      <p class="text-gray-600">No categories found. Add categories to your articles to see them here.</p>
    </div>
  )}
  
  <div class="mt-12 bg-indigo-50 p-6 rounded-lg">
    <h2 class="text-xl font-semibold mb-3">About Categories</h2>
    <p class="text-gray-700">
      Categories are automatically determined from your articles. To explicitly set a category, 
      add a <code class="bg-indigo-100 px-2 py-1 rounded">category</code> property 
      to your article frontmatter. If no category is specified, we'll use the article's first tag instead.
    </p>
  </div>
</MainLayout>